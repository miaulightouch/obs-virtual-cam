#define MyAppName "@CMAKE_PROJECT_NAME@"
#define MyAppVersion "@CMAKE_PROJECT_VERSION@"
#define MyAppPublisher "@PLUGIN_AUTHOR@"
#define MyAppURL "@PLUGIN_WEBSITE@"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{@UUID_APP@}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDirName}
DefaultGroupName={#MyAppName}
OutputBaseFilename={#MyAppName}-{#MyAppVersion}-Windows-Installer
Compression=lzma
SolidCompression=yes
DirExistsWarning=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "..\release\Package\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\LICENSE"; Flags: dontcopy
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Run]
Filename: "{sys}\regsvr32.exe"; Parameters: "/s /n /i:{code:GetDeviceNumber} ""{app}\bin\32bit\obs-virtualsource.dll"""; Flags: 32bit;
Filename: "{sys}\regsvr32.exe"; Parameters: "/s /n /i:{code:GetDeviceNumber} ""{app}\bin\64bit\obs-virtualsource.dll"""; Flags: 64bit;

[UninstallRun]
Filename: "{sys}\regsvr32.exe"; Parameters: "/s /u ""{app}\bin\32bit\obs-virtualsource.dll"""; Flags: 32bit; RunOnceId: "Unregister32";
Filename: "{sys}\regsvr32.exe"; Parameters: "/s /u ""{app}\bin\64bit\obs-virtualsource.dll"""; Flags: 64bit; RunOnceId: "Unregister64";

[Code]
procedure InitializeWizard();
var
  GPLText: AnsiString;
  Page: TOutputMsgMemoWizardPage;
  OptionPage: TInputQueryWizardPage;
  DevicesComboBox: TNewComboBox;
  DeviceCount: Integer;
begin
  ExtractTemporaryFile('LICENSE');
  LoadStringFromFile(ExpandConstant('{tmp}\LICENSE'), GPLText);
  Page := CreateOutputMsgMemoPage(wpWelcome,
    'License Information', 'Please review the license terms before installing {#MyAppName}',
    'Press Page Down to see the rest of the agreement. Once you are aware of your rights, click Next to continue.',
    String(GPLText)
  );

  DeviceCount := StrToInt(ExpandConstant('{param:DEVICE|1}'));
  if (DeviceCount < 1) then
    DeviceCount := 1;
  if (DeviceCount > 4) then
    DeviceCount := 4;

  OptionPage := CreateInputQueryPage(Page.ID, 'Options', '', '');
  OptionPage.Add('Devices:', False);
  OptionPage.Edits[0].Text := IntToStr(DeviceCount);

  DevicesComboBox := TNewComboBox.Create(OptionPage);
  DevicesComboBox.Parent := OptionPage.Edits[0].Parent;
  DevicesComboBox.Left := OptionPage.Edits[0].Left;
  DevicesComboBox.Top := OptionPage.Edits[0].Top;
  DevicesComboBox.Width := OptionPage.Edits[0].Width;
  DevicesComboBox.Height := OptionPage.Edits[0].Height;
  DevicesComboBox.TabOrder := OptionPage.Edits[0].TabOrder;
  DevicesComboBox.Style := csDropDownList;
  DevicesComboBox.Items.Add('1');
  DevicesComboBox.Items.Add('2');
  DevicesComboBox.Items.Add('3');
  DevicesComboBox.Items.Add('4');
  DevicesComboBox.ItemIndex := DeviceCount - 1;

  OptionPage.PromptLabels[0].FocusControl := DevicesComboBox;
  OptionPage.Edits[0].Visible := False;
end;

function GetDeviceNumber(Param: string): string;
begin
  Result := DevicesComboBox.Text;
end;

// credit where it's due :
// following function come from https://github.com/Xaymar/obs-studio_amf-encoder-plugin/blob/master/%23Resources/Installer.in.iss#L45
function GetDirName(Value: string): string;
var
  InstallPath: string;
begin
  // initialize default path, which will be returned when the following registry
  // key queries fail due to missing keys or for some different reason
  Result := '{autopf}\obs-studio';
  // query the first registry value; if this succeeds, return the obtained value
  if RegQueryStringValue(HKLM32, 'SOFTWARE\OBS Studio', '', InstallPath) then
    Result := InstallPath
end;

